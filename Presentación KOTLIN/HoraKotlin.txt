class Hora {
    companion object {
        const val HH24 = "HH24"
        const val HH12 = "HH12"
        const val AM = "a.m."
        const val PM = "p.m."
    }

    var formato: String = HH12
    var ampm: String? = AM
    var horas: Int = 12
    var minutos: Int = 0
    var segundos: Int = 0

    constructor() {
        // Constructor por defecto: HH12 formato, AM
    }

    constructor(formato: String) {
        if (HH12 == formato) {
            this.horas = 12
            this.minutos = 0
            this.segundos = 0
            this.formato = HH12
            this.ampm = AM
        } else if (HH24 == formato) {
            this.horas = 0
            this.minutos = 0
            this.segundos = 0
            this.formato = HH24
            this.ampm = null
        } else {
            this.horas = -1
            this.minutos = -1
            this.segundos = -1
            this.formato = ""
            this.ampm = null
        }
    }

    constructor(horas: Int, minutos: Int, segundos: Int) {
        this.horas = horas
        this.minutos = minutos
        this.segundos = segundos
        this.formato = HH24
    }

    constructor(horas: Int, minutos: Int, segundos: Int, ampm: String) {
        this.horas = horas
        this.minutos = minutos
        this.segundos = segundos
        this.formato = HH12
        this.ampm = ampm

        if (!esHoraValida1()) {
            this.horas = -1
            this.minutos = -1
            this.segundos = -1
            this.formato = ""
            this.ampm = null
        }
    }

    constructor(horas: Int, minutos: Int, segundos: Int, formato: String, ampm: String) {
        this.horas = horas
        this.minutos = minutos
        this.segundos = segundos
        this.formato = formato

        if (HH12 == formato) {
            this.ampm = ampm
        } else {
            this.ampm = null
        }

        if (!esHoraValida1()) {
            this.horas = -1
            this.minutos = -1
            this.segundos = -1
            this.formato = ""
            this.ampm = null
        }
    }

    fun esHoraValida1(): Boolean {
        return when (formato) {
            HH24 -> horas in 0..23 && minutos in 0..59 && segundos in 0..59
            HH12 -> horas in 1..12 && minutos in 0..59 && segundos in 0..59 && (AM == ampm || PM == ampm)
            else -> false
        }
    }

    private fun esHoraValida(): Boolean {
        if (minutos < 0 || minutos > 59 || segundos < 0 || segundos > 59) return false
        return if (formato == HH24) {
            horas in 0..23
        } else {
            horas in 1..12 && (ampm == AM || ampm == PM)
        }
    }

    fun getHoraHH24(): Hora {
        val nuevaHora = clonar()
        if (formato == HH12) nuevaHora.setFormato(HH24)
        return nuevaHora
    }

    fun getHoraHH12(): Hora {
        val nuevaHora = clonar()
        if (formato == HH24) nuevaHora.setFormato(HH12)
        return nuevaHora
    }

    private fun clonar(): Hora {
        return Hora(horas, minutos, segundos, formato, ampm ?: "")
    }

    fun restar(other: Hora): Int {
        val segundosThis = convertirASegundos()
        val segundosOther = other.convertirASegundos()
        return segundosThis - segundosOther
    }

    fun esIgual(other: Hora): Boolean {
        return this.restar(other) == 0
    }

    fun esMenor(other: Hora): Boolean {
        return this.restar(other) < 0
    }

    fun esMayor(other: Hora): Boolean {
        return this.restar(other) > 0
    }

    override fun toString(): String {
        var sufijo = ""
        var horasMostrar = horas

        if (formato == HH12) {
            sufijo = ampm ?: ""
            if (horas == 0) horasMostrar = 12
        }

        return String.format("%02d:%02d:%02d %s", horasMostrar, minutos, segundos, sufijo)
    }

    fun setFormato(formato: String) {
        if (formato == HH12 && this.formato == HH24) {
            if (horas == 0) {
                horas = 12
                ampm = AM
            } else if (horas == 12) {
                ampm = PM
            } else if (horas > 12) {
                horas -= 12
                ampm = PM
            } else {
                ampm = AM
            }
        } else if (formato == HH24 && this.formato == HH12) {
            if (ampm == PM && horas != 12) {
                horas += 12
            } else if (ampm == AM && horas == 12) {
                horas = 0
            }
        }
        this.formato = formato
    }

    private fun convertirASegundos(): Int {
        var horasEn24 = horas
        if (formato == HH12) {
            if (ampm == PM && horas != 12) {
                horasEn24 += 12
            } else if (ampm == AM && horas == 12) {
                horasEn24 = 0
            }
        }
        return horasEn24 * 3600 + minutos * 60 + segundos
    }

    fun getFormato(): String {
        return formato
    }

    fun getAmpm(): String? {
        return ampm
    }

    fun getHoras(): Int {
        return horas
    }

    fun getMinutos(): Int {
        return minutos
    }

    fun getSegundos(): Int {
        return segundos
    }

    fun setAmpm(ampm: String) {
        this.ampm = ampm
    }

    fun setHoras(horas: Int) {
        this.horas = horas
    }

    fun setMinutos(minutos: Int) {
        this.minutos = minutos
    }

    fun setSegundos(segundos: Int) {
        this.segundos = segundos
    }
}
